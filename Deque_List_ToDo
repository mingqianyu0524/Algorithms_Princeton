/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<Item> implements Iterable<Item> {

    private int n;
    private Node first;
    private Node last;

    private class Node {
        private Item item;
        private Node next;
    }

    // construct an empty deque
    public Deque() {
        first = null;
        last = null;
        n = 0;
    }

    // is the deque empty?
    public boolean isEmpty() {
        return n == 0;
    }

    // return the number of items on the deque
    public int size() {
        return n;
    }

    // add the item to the front
    public void addFirst(Item item) {
        try {
            Node oldFirst = first;
            first = new Node();
            first.item = item;
            if (oldFirst == null) {
                first.next = last;
            }
            else {
                first.next = oldFirst;
            }
            n++;
        }
        catch (IllegalArgumentException e) {
            throw new IllegalArgumentException();
        }
        // assert check;
    }

    // add the item to the back
    public void addLast(Item item) {
        try {
            Node oldLast = last;
            last = new Node();
            last.item = item;
            if (oldLast != null) {
                oldLast.next = last;
            }
            n++;
        }
        catch (IllegalArgumentException e) {
            throw new IllegalArgumentException();
        }
        // assert check;
    }

    // remove and return the item from the front
    public Item removeFirst() {
        Item item = first.item;
        first = first.next;
        n--;
        return item;
    }

    // remove and return the item from the back
    public Item removeLast() {
        Item item = last.item;
        last = first;
        while (last.next != null) {
            last = last.next;
        }
        n--;
        return item;
    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator() {
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item> {
        private Node current = first;

        public boolean hasNext() {
            return current != null;
        }

        public Item next() {
            try {
                Item item = current.item;
                current = current.next;
                return item;
            }
            catch (NoSuchElementException e) {
                throw new NoSuchElementException();
            }
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    // unit testing (required)
    public static void main(String[] args) {
        Deque<String> deque = new Deque<>();
        for (String s : args) {
            deque.addFirst(s);
            deque.addLast(s);
        }
        System.out.println(deque.size());

        for (String o : deque) {
            System.out.println(deque.removeFirst());
            System.out.println(deque.removeLast());
        }
    }
}
